name: "Build, test and deploy"
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test-backend:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        working-dir: ["lambda", "linux"]
    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-go@v3
        with:
          go-version-file: "backend/go.mod"
          cache: true
          cache-dependency-path: backend/go.sum

      - name: "Install dependencies"
        run: |
          go get -v .
        working-directory: "backend/cmd/${{ matrix.working-dir }}"

      - name: "Test"
        run: |
          go test -v .
        working-directory: "backend/cmd/${{ matrix.working-dir }}"

  test-frontend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v3
        with:
          node-version: "18.4.0"
          cache: "yarn"
          cache-dependency-path: front/yarn.lock
      - run: yarn
        working-directory: front/
      - run: yarn build
        working-directory: front/

  deploy:
    runs-on: ubuntu-latest
    needs: ["test-frontend", "test-backend"]
    concurrency: terraform-operation
    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-go@v3
        with:
          go-version-file: "backend/go.mod"
          cache: true
          cache-dependency-path: backend/go.sum

      - uses: actions/setup-node@v3
        with:
          node-version: "18.4.0"
          cache: "yarn"
          cache-dependency-path: front/yarn.lock

      - uses: aws-actions/setup-sam@v2
      - uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.TERRAFORM_CLOUD_API_TOKEN }}

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform preparation
        run: mkdir front/dist && touch front/dist/.keep

      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request'
        run: terraform plan -no-color -input=false
        continue-on-error: true

      - name: Update Pull Request
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            <details><summary>Show Plan</summary>
            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`
            </details>
            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          terraform apply \
          -auto-approve \
          -input=false \
          -replace="null_resource.build_frontend" \
          -replace="null_resource.build_backend"
